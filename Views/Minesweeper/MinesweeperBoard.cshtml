@model string
@{
	ViewData["Title"] = "Minesweeper";
}

<script>
	var userId = '@ViewData["UserId"]';
	var savedGameState = @Html.Raw(Model);
</script>

<input type="hidden" id="userId" value="@ViewData["UserId"]" />

<p>Current time: @DateTime.Now</p>

<div class="text-center">
	<h2>@ViewData["Title"]</h2>
</div>

<div class="game-container">

	<div id="minesweeper-board" class="minesweeper-board">
		@for (var row = 0; row < 10; row++)
		{
			@for (var col = 0; col < 10; col++)
			{
				<div class="cell"></div>
			}
		}
	</div>
</div>

<div class="d-flex justify-content-center m-4">
	<button id="saveGameButton" class="btn btn-primary">Save Game</button>
	<button id="showSavedGamesButton" class="btn btn-secondary">Show Saved Games</button>
</div>


@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="~/js/minesweeper.js"></script>
    <script src="~/js/site.js"></script>

    <script>
        $(document).ready(function () {
            assignCellInteractions();

            $("#showSavedGamesButton").on("click", function () {
                window.location.href = "/Minesweeper/SavedGames";
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            if (savedGameState && savedGameState !== '') {
                initializeGameBoard(savedGameState);
            }
        });

        function initializeGameBoard(gameState) {
            // Convert the gameState from JSON string to an object
            var boardState = JSON.parse(gameState);

            // Iterate through the rows and columns of the game board
            for (var row = 0; row < boardState.length; row++) {
                for (var col = 0; col < boardState[row].length; col++) {
                    var cellState = boardState[row][col];
                    var cell = $('.cell').eq(row * 10 + col); // Assuming 10 columns and cells are in a flat list

                    // Apply the saved state to the cell
                    if (cellState.revealed) {
                        cell.addClass('revealed');
                    }
                    if (cellState.flagged) {
                        cell.addClass('flagged');
                    }
                    if (cellState.hasMine) {
                        cell.data('has-mine', true);
                    }
                    cell.data('neighboring-mines', cellState.neighboringMines);
                }
            }
        }
    </script>
}
